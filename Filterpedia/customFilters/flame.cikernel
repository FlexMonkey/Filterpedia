// Based on https://www.shadertoy.com/view/XsXSWS

vec2 hash( vec2 p )
{
    p = vec2( dot(p,vec2(127.1,311.7)),
             dot(p,vec2(269.5,183.3)) );
    return -1.0 + 2.0*fract(sin(p)*43758.5453123);
}

float noise(vec2 p )
{
    const float K1 = 0.366025404; // (sqrt(3)-1)/2;
    const float K2 = 0.211324865; // (3-sqrt(3))/6;
    
    vec2 i = floor( p + (p.x+p.y)*K1 );
    
    vec2 a = p - i + (i.x+i.y)*K2;
    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);
    vec2 b = a - o + K2;
    vec2 c = a - 1.0 + 2.0*K2;
    
    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );
    
    vec3 n = h*h*h*h * vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));
    
    return dot( n, vec3(70.0) );
}

float fbm(vec2 uv, int iterations)
{
    float f = 0.0;
    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );
    
    float multiplier = 0.5;
    
    for (int i = 0; i <= iterations; i++)
    {
        f += multiplier * noise( uv );
        uv *= m;
        multiplier /= 2.0;
    }
    
    f = 0.5 + 0.5*f;
    return f;
}

kernel vec4 flameKernel(float time, vec2 size, float iterations, float anisotropy,
                         float edgeDefinition, float hotspotExponent, float density,
                         float redMultiplier, float redExponent,
                         float greenMultiplier, float greenExponent,
                         float blueMultiplier, float blueExponent,
                         float strength)
{
    vec2 uv = destCoord() / (size.x * 2.0); // iResolution.xy;
    vec2 q = uv;
    float T3 = max(3.0, 1.25 * strength) * time;
    q.x -= 0.25; // x position - 0 = left, 0.25 = center, 0.5 = right
    q.x *= anisotropy;
    q.y -= 0.1; // y position = 0 = bottom,
    q.y *= 2.; // y scale
    float n = fbm(strength*q - vec2(0,T3), int(iterations));
    
    float c = 1.0 - edgeDefinition * pow( max( 0.0, length(q * vec2(1.8 + q.y * 1.5, 1.0) ) - n * max( 0.0, q.y + 0.25 ) ), 1.2 );

    float c1 = density * n * c * (1.5 - pow(2.0 * uv.y, hotspotExponent));
    c1=clamp(c1,0.,1.);
        
    vec3 col = vec3(redMultiplier * pow(c1, redExponent),
                    greenMultiplier * pow(c1, greenExponent),
                    blueMultiplier * pow(c1, blueExponent));

    float a = c * (1.-pow(uv.y,3.0));
    return vec4( mix(vec3(0.),col,a), 1.0);
}